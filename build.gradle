plugins {
    id 'groovy'
    id 'idea'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'

    id 'java-gradle-plugin'

    id 'maven'
    id 'signing'
    id 'com.gradle.plugin-publish' version '0.10.1'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'io.freefair.lombok' version '2.9.5'
}

description = 'Gradle plugin to find duplicate code using PMDs copy/paste detection (= CPD)'
group = 'de.aaschmid'
version = '2.0'

ext {
    isBuildOnJenkins = System.getenv('BUILD_TAG')?.startsWith('jenkins-') ?: false
}

sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

configurations {
    provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
    test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
    integTest {
        compileClasspath += configurations.provided + main.output + test.output
        runtimeClasspath += configurations.provided + main.output + test.output
    }
}

configurations {
    integTestCompile.extendsFrom testCompile
    integTestRuntime.extendsFrom testRuntime
}

dependencies {
    provided gradleApi()
    provided localGroovy()

    provided 'javax.inject:javax.inject:1'
    provided 'net.sourceforge.pmd:pmd-dist:6.13.0'

    testCompile('org.spockframework:spock-core:1.3-groovy-2.4') {
        exclude module: 'groovy-all'
    }
}

javadoc {
    classpath += configurations.provided
}

jar {
    manifest {
        attributes (
            'Built-By': "Gradle ${gradle.gradleVersion}",
            'Built-Date': new Date(),
            'Specification-Title': 'gradle-cpd-plugin',
            'Specification-Version': version,
            'Specification-Vendor': 'Andreas Schmid, service@aaschmid.de',
            'Implementation-Title': 'gradle-cpd-plugin',
            'Implementation-Version': version,
            'Implementation-Vendor': 'Andreas Schmid, service@aaschmid.de',
        )
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

test {
    ignoreFailures = isBuildOnJenkins

    testLogging {
        exceptionFormat "full"
    }
}

jacoco {
    toolVersion = '0.8.3'
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = false
    }
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

task integTest(type: Test) {
    inputs.files jar
    shouldRunAfter 'test'

    ignoreFailures = isBuildOnJenkins

    testClassesDirs = sourceSets.integTest.output.classesDirs

    classpath = sourceSets.integTest.runtimeClasspath

    reports.junitXml.destination = file("${project.buildDir}/integTest-results")
    reports.html.destination = file("${project.reportsDir}/${name}")
}
check.dependsOn integTest

gradlePlugin {
    testSourceSets sourceSets.test, sourceSets.integTest

    plugins {
        cpd {
            id = "de.aaschmid.cpd"
            implementationClass = "de.aaschmid.gradle.plugins.cpd.CpdPlugin"
        }
        // Note: this has to be commented out for publishPlugins
        legacyCpd {
            id = "cpd"
            implementationClass = "de.aaschmid.gradle.plugins.cpd.CpdPlugin"
        }
    }
}

idea {
    module {
        scopes.PROVIDED.plus += [ configurations.provided ]

        scopes.TEST.plus.add(configurations.integTestCompile)
        scopes.TEST.plus.add(configurations.integTestRuntime)
    }
}

// -- build and publish artifacts -------------------------------------------------------------------------------------

signing {
    // requires gradle.properties, see http://www.gradle.org/docs/current/userguide/signing_plugin.html
    required {
        gradle.taskGraph.hasTask('uploadArchives')
    }
    sign configurations.archives
}

if (!hasProperty('sonatypeUsername')) {
    ext.sonatypeUsername = ''
}
if (!hasProperty('sonatypePassword')) {
    ext.sonatypePassword = ''
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment ->
                signing.signPom(deployment)
            }
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                // username and password from gradle.properties
                authentication(userName: sonatypeUsername, password: sonatypePassword )
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: sonatypeUsername, password: sonatypePassword )
            }

            pom {
                project {
                    name 'gradle-cpd-plugin'
                    packaging 'jar'
                    description project.description
                    url 'https://github.com/aaschmid/gradle-cpd-plugin'

                    scm {
                        url 'scm:git@github.com:aaschmid/gradle-cpd-plugin.git'
                        connection 'scm:git@github.com:aaschmid/gradle-cpd-plugin.git'
                        developerConnection 'scm:git@github.com:aaschmid/gradle-cpd-plugin.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'aaschmid'
                            name 'Andreas Schmid'
                        }
                    }
                }
                whenConfigured { pom ->
                    pom.dependencies.removeAll(pom.dependencies.findAll{ dep -> dep.scope in [ 'compile', 'test' ] })
                }
            }
        }
    }
}

if (!hasProperty('bintrayUsername')) {
    ext.bintrayUsername = ''
}
if (!hasProperty('bintrayApiKey')) {
    ext.bintrayApiKey = ''
}
bintray {
    user = bintrayUsername
    key = bintrayApiKey
    pkg {
        repo = 'gradle-plugins'
        name = 'gradle-cpd-plugin'
        userOrg = bintrayUsername
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/aaschmid/gradle-cpd-plugin.git'
        version {
            name = project.version
            desc = "Gradle plugin to find duplicate code using PMDs copy/paste detection (= CPD) in version ${project.version}."
            released  = new Date()
            vcsTag = "https://github.com/aaschmid/gradle-cpd-plugin/releases/tag/v${project.version}"
            attributes = ['gradle-plugin': 'de.aaschmid.cpd:de.aaschmid:gradle-cpd-plugin']
        }
        configurations = ['archives']
    }
}

// Note: The plugin has to be uploaded to Bintray first
pluginBundle {
    website = 'https://github.com/aaschmid/gradle-cpd-plugin'
    vcsUrl = 'https://github.com/aaschmid/gradle-cpd-plugin'

    description = 'A Gradle plugin to find duplicate code using PMDs copy/paste detection (= CPD).'
    tags = [ 'duplicates', 'cpd', 'copy-paste-detection' ]

    plugins {
        cpd {
            displayName = 'Gradle CPD plugin'
        }
    }

    mavenCoordinates {
        groupId = project.group
        artifactId = 'gradle-cpd-plugin'
        version = project.version
    }
}
